use std::fmt;

#[derive(Clone, Debug)]
pub enum Token<'input> {
    OpenBrace,
    CloseBrace,
    OpenBracket,
    CloseBracket,
    OpenParen,
    CloseParen,
    Semicolon,
    Comma,
    Colon,
    Plus,
    Minus,
    Star,
    Slash,
    Var,
    Mod,
    Div,
    And,
    Or,
    Not,
    Assign,
    Equal,
    NotEqual,
    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    Func,
    EndFunc,
    Do,
    Return,
    Then,
    If,
    EndIf,
    Else,
    For,
    To,
    By,
    EndFor,
    While,
    EndWhile,
    Print,
    Read,
    Int,
    Real,
    Identifier(&'input str),
    StringLiteral(&'input str),
    IntLiteral(i64),
    RealLiteral(f64),
}

impl<'input> fmt::Display for Token<'input> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match *self {
            Token::OpenBrace => write!(f, "{}", "{"),
            Token::CloseBrace => write!(f, "{}", "}"),
            Token::OpenBracket => write!(f, "["),
            Token::CloseBracket => write!(f, "]"),
            Token::OpenParen => write!(f, "("),
            Token::CloseParen => write!(f, ")"),
            Token::Semicolon => write!(f, ";"),
            Token::Comma => write!(f, ","),
            Token::Colon => write!(f, ":"),
            Token::Plus => write!(f, "+"),
            Token::Minus => write!(f, "-"),
            Token::Star => write!(f, "*"),
            Token::Slash => write!(f, "/"),
            Token::Var => write!(f, "var"),
            Token::Mod => write!(f, "mod"),
            Token::Div => write!(f, "div"),
            Token::And => write!(f, "and"),
            Token::Or => write!(f, "or"),
            Token::Not => write!(f, "not"),
            Token::Assign => write!(f, ":="),
            Token::Equal => write!(f, "="),
            Token::NotEqual => write!(f, "<>"),
            Token::Less => write!(f, "<"),
            Token::LessEqual => write!(f, "<="),
            Token::Greater => write!(f, ">"),
            Token::GreaterEqual => write!(f, ">="),
            Token::Func => write!(f, "func"),
            Token::EndFunc => write!(f, "endfunc"),
            Token::Do => write!(f, "do"),
            Token::Return => write!(f, "return"),
            Token::Then => write!(f, "then"),
            Token::If => write!(f, "if"),
            Token::EndIf => write!(f, "endif"),
            Token::Else => write!(f, "else"),
            Token::For => write!(f, "for"),
            Token::To => write!(f, "to"),
            Token::By => write!(f, "by"),
            Token::EndFor => write!(f, "endfor"),
            Token::While => write!(f, "while"),
            Token::EndWhile => write!(f, "endwhile"),
            Token::Print => write!(f, "print"),
            Token::Read => write!(f, "read"),
            Token::Int => write!(f, "int"),
            Token::Real => write!(f, "real"),
            Token::Identifier(s) => write!(f, "{}", s),
            Token::StringLiteral(s) => write!(f, "{}", s),
            Token::IntLiteral(n) => write!(f, "{}", n),
            Token::RealLiteral(n) => write!(f, "{}", n),
        }
    }
}
