#[LALR] grammar<'input>;

use crate::ast;
use crate::tokens::Token;
use crate::lexer::{
    LexicalError,
    Location,
};

#[inline]
Comma<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

pub Program: ast::Program<'input> =
    <declaration_list:DeclarationList> <function_list:FunctionList> => ast::Program {
        declaration_list,
        function_list,
    };

pub DeclarationList
    = Declaration*;

pub FunctionList
    = Function*;

pub Declaration: ast::Declaration<'input> =
    "var" <variable_list:VariableList> ";" => ast::Declaration {
        variable_list,
    };

pub VariableList =
    Comma<Variable>;

pub Variable: ast::Variable<'input> =
    <name:"identifier"> ":" <variable_type:VariableType> => ast::Variable {
        name,
        variable_type,
    };

pub VariableType: ast::VariableType = {
    "int" => ast::VariableType::Int,
    "real" => ast::VariableType::Real,
    "int" "[" <n:"int_literal"> "]" => ast::VariableType::IntVector(n as u64, true),
    "real" "[" <n:"int_literal"> "]" => ast::VariableType::RealVector(n as u64, true),
};

pub Parameter: ast::Parameter<'input> =
    <name:"identifier"> ":" <variable_type:ParameterType> => ast::Parameter {
        name,
        variable_type,
    };


pub ParameterType: ast::VariableType = {
    "int" => ast::VariableType::Int,
    "real" => ast::VariableType::Real,
    "int" "[" <n:"int_literal"> "]" => ast::VariableType::IntVector(n as u64, true),
    "int" "[" "]" => ast::VariableType::IntVector(0, false),
    "real" "[" <n:"int_literal"> "]" => ast::VariableType::RealVector(n as u64, true),
    "real" "[" "]" => ast::VariableType::RealVector(0, false),
};

pub Function: ast::Function<'input> =
    <return_type:VariableType> "func" <name:"identifier"> "(" <parameter_list:ParameterList> ")" <declaration_list:DeclarationList> <statement_list:StatementList> "endfunc" =>
        ast::Function {
            return_type,
            name,
            parameter_list,
            declaration_list,
            statement_list,
        };

pub ParameterList = Comma<Parameter>;

pub ExpressionList = Comma<Expression>;

pub LExpression: ast::Expression<'input> = {
    <e1:LExpressionTerm> <operator:BinaryLogOp> <e2:LExpression> => ast::Expression::BinaryExpression {
        left_expression: Box::new(e1),
        operator,
        right_expression: Box::new(e2),
    },
    <operator:UnaryLogOp> <e:LExpression> => ast::Expression::UnaryExpression {
        expression: Box::new(e),
        operator,
    },
    LExpressionTerm,
};

LExpressionTerm: ast::Expression<'input> = {
    <e1:Expression> <operator:RelOp> <e2:Expression> => ast::Expression::BinaryExpression {
        left_expression: Box::new(e1),
        operator,
        right_expression: Box::new(e2),
    },
    Expression,
};

#[inline]
RelOp: ast::BinaryOperator = {
    "=" => ast::BinaryOperator::Equal,
    "<>" => ast::BinaryOperator::NotEqual,
    "<" => ast::BinaryOperator::Less,
    "<=" => ast::BinaryOperator::LessEqual,
    ">" => ast::BinaryOperator::Greater,
    ">=" => ast::BinaryOperator::GreaterEqual,
};

#[inline]
BinaryLogOp: ast::BinaryOperator = {
    "and" => ast::BinaryOperator::And,
    "or" => ast::BinaryOperator::Or,
};

#[inline]
UnaryLogOp: ast::UnaryOperator = {
    "not" => ast::UnaryOperator::Not,
};

pub Expression: ast::Expression<'input> = {
    Term,
    <e1:Expression> <operator:AddOp> <e2:Term> => ast::Expression::BinaryExpression {
        left_expression: Box::new(e1),
        operator,
        right_expression: Box::new(e2),
    },
};

#[inline]
AddOp: ast::BinaryOperator = {
    "+" => ast::BinaryOperator::Addition,
    "-" => ast::BinaryOperator::Subtraction,
};

Term: ast::Expression<'input> = {
    <e1:Term> <operator:MulOp> <e2:Factor> => ast::Expression::BinaryExpression {
        left_expression: Box::new(e1),
        operator,
        right_expression: Box::new(e2),
    },
    Factor,
};

#[inline]
MulOp: ast::BinaryOperator = {
    "*" => ast::BinaryOperator::Multiplication,
    "/" => ast::BinaryOperator::Division,
    "mod" => ast::BinaryOperator::Mod,
    "div" => ast::BinaryOperator::IntDivision,
};

Factor: ast::Expression<'input> = {
    <variable_identifier:VariableIdentifier> => ast::Expression::VariableExpression(variable_identifier),
    "(" <e:Expression> ")" => e,
    <name:"identifier"> "(" <argument_list:ExpressionList> ")"=> ast::Expression::FunctionCallExpression {
        name,
        argument_list,
    },
    UnaryExpression,
    "int_literal" => ast::Expression::IntExpression(<>),
    "real_literal" => ast::Expression::RealExpression(<>),
};

UnaryExpression: ast::Expression<'input> = {
    <operator:UnOp> <f:Factor> => ast::Expression::UnaryExpression {
        operator,
        expression: Box::new(f)
    },
};

#[inline]
UnOp: ast::UnaryOperator = {
    "-" => ast::UnaryOperator::Negative,
};

pub ArgumentList = ExpressionList;

pub StatementList = Statement*;

pub Statement: ast::Statement<'input> = {
    "print" <parameter_list:PrintableList> ";" => ast::Statement::PrintStatement {
        parameter_list,
    },
    "read" <parameter_list:VariableIdentifierList> ";" => ast::Statement::ReadStatement {
        parameter_list,
    },
    "return" <expression:Expression> ";" => ast::Statement::ReturnStatement {
        expression,
    },
    "for" <name:"identifier"> ":=" <start_expression:Expression> "to" <to_expression:Expression> "by" <by_expression:Expression> <statement_list:StatementList> "endfor" ";" => ast::Statement::ForStatement {
        init_variable: ast::VariableIdentifier {
            name,
            use_index: false,
            expression: Box::new(ast::Expression::Empty),
        },
        start_expression,
        to_expression,
        by_expression,
        body: statement_list,
    },
    "for" <name:"identifier"> ":=" <start_expression:Expression> "to" <to_expression:Expression> <statement_list:StatementList> "endfor" ";" => ast::Statement::ForStatement {
        init_variable: ast::VariableIdentifier {
            name,
            use_index: false,
            expression: Box::new(ast::Expression::Empty),
        },
        start_expression,
        to_expression,
        by_expression: ast::Expression::Empty,
        body: statement_list,
    },
    "while" <expression:LExpression> "do" <statement_list:StatementList> "endwhile" ";" => ast::Statement::WhileStatement {
        expression,
        body: statement_list,
    },
    "if" <expression:LExpression> "then" <statement_list1:StatementList> "else" <statement_list2:StatementList> "endif" ";" => ast::Statement::IfStatement {
        expression,
        if_body: statement_list1,
        else_body: statement_list2,
        use_else: true,
    },
    "if" <expression:LExpression> "then" <statement_list:StatementList> "endif" ";" => ast::Statement::IfStatement {
        expression,
        if_body: statement_list,
        else_body: Vec::new(),
        use_else: false,
    },
    <variable:VariableIdentifier> ":=" <expression:Expression> ";" => ast::Statement::AssignmentStatement {
        variable,
        expression,
    },
};

PrintableList = Comma<Printable>;
VariableIdentifierList = Comma<VariableIdentifier>;

Printable: ast::Printable<'input> = {
    <e:Expression> => ast::Printable::Expression(e),
    <s:"string_literal"> => ast::Printable::String(s),
};

VariableIdentifier: ast::VariableIdentifier<'input> = {
    <name:"identifier"> "[" <expression:Expression> "]" => ast::VariableIdentifier {
        name,
        use_index: true,
        expression: Box::new(expression),
    },
    <name:"identifier"> => ast::VariableIdentifier {
        name,
        use_index: false,
        expression: Box::new(ast::Expression::Empty),
    },
};

extern {
    type Location = Location;
    type Error = LexicalError;

    enum Token<'input> {
        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        ";" => Token::Semicolon,
        "," => Token::Comma,
        ":" => Token::Colon,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        ":=" => Token::Assign,
        "=" => Token::Equal,
        "<>" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "var" => Token::Var,
        "func" => Token::Func,
        "endfunc" => Token::EndFunc,
        "return" => Token::Return,
        "to" => Token::To,
        "by" => Token::By,
        "and" => Token::And,
        "mod" => Token::Mod,
        "div" => Token::Div,
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "endif" => Token::EndIf,
        "for" => Token::For,
        "endfor" => Token::EndFor,
        "or" => Token::Or,
        "do" => Token::Do,
        "print" => Token::Print,
        "read" => Token::Read,
        "while" => Token::While,
        "endwhile" => Token::EndWhile,
        "not" => Token::Not,
        "int" => Token::Int,
        "real" => Token::Real,
        "identifier" => Token::Identifier(<&'input str>),
        "string_literal" => Token::StringLiteral(<&'input str>),
        "int_literal" => Token::IntLiteral(<i64>),
        "real_literal" => Token::RealLiteral(<f64>),
    }
}